
Part1:


<UML Model Screenshot>

<Description>


<xADL Model Screenshot>

Description: 

Client: 
The client model has a view component for user interaction (e.g. make requests, view results of requests). With the “Sound Recorder” component the client can ask about recorded music. 
“Fingerprint Generator” generates a fingerprint from a music recording. This fingerprint will be sent to the “Server Model” over the “Synchronous Server Proxy” Connector.  
It also gets the result from the server with the “Synchronous Server Proxy” Connector.

Server:
The database stores the whole information needed from the server (e.g. coins of clients). 
The server model transmits a client request to the “Network Manager”. “Peer Router” searches for some relevant peers for a request and offers them to the “Network Manager”. 
“Message Listener” receives successfully identified fingerprints from peers, so that the server can manage coin handling and passing the result to the client. 
For user interaction the server has a “View” – Component.


Peers:
The “P2P Connector” gives requests to specific peers, which try to identify the fingerprint. 
If a peer successfully identified a fingerprint it sends a message to the “Message Queue”. 
“Neighbour Router” chooses some common peers and passes a fingerprint to them. New peers have to subscribe at the “Join Listener” Component, so that they appear on the servers peer list. 
For preventing dead peers there should be a periodical message from all peers. “Request Listener” waits for fingerprints from the “P2P Connector”. 
Every peer has also a view for user interaction. “Music Library” stores all music known from the peer.


Part2:


What we have learned…

… about modelling

Modeling the architecture is one of the first steps when developing systems. As the model describes the functional and structural properties of the system, it should be as accurate and unambiguous as possible.
In teams, heterogenous technical qualifications of the member are prevalent, therefore a common ground must be established when describing models. To achieve that, standardized modelling languages are often used. 
Our team chose UML and xADL as modelling languages because neither of them suffice to describe the given system alone. Both languages focus on different aspects respectively. 
It is of the utmost importance to have the same understanding of the architecture between the team members. When the system is described using arbitrary diagrams, the understanding of the diagrams has to be synchronized again, because visual representations in particular are prone to different interpretations.
The synchronization of the mental models is very time-consuming in general and communication is the best way to achieve that. The architecture and the level of abstraction must be discussed with the entire team thoroughly.

Like:
-> Easy to give an overview.



… about notations

Every notation is designed for a specific problem domain, this limits its usage outside that domain. Different notations have different strengths and weaknesses and this is in particular true for UML and xADL. UML emphasizes on providing a good overview, but is ambiguous. xADL designed to model structional properties and describing interfaces. Like many XML dialects, xADL is also very verbose. A graphical editor for xADL documents are virtually mandatory. It is very specific and can be the starting point for code generation. 

We used Archstudio 4 as graphical interface for xADL, which is an Eclipse plugin. The user interface depends heavily on context menus and is not intuitive. Simple tasks like adding an interface to a component takes a lot of steps.
Like:

-> Graphical is better understandable than text, but lacks details. E.g. what distribution algorithm is a Message Queue using?

Dislike:
-> (Visual) grouping of components in xADL not possible. Would make it even clearer to understand at first sight. E.g. grouping of Server, Client and Peer components.

… about the tools

Dislike:

-> Not clear what they do at first sight.
-> Very complicated UI to do simple things.

Archstudio 4: 

Dislike: 

-> Too much right-Click based menus, so everything takes a lot of time and clicks.
-> To set a Connection it needs a lot of clicks. It would be better to select 2 components and the tool makes a connection between them.
-> "DEL" Button should work for removing an element.
-> Unintuitive GUI, it's not clear (without a tutorial) how to use the editors (or which editor to use for what).

Like:

-> Automatic code generation.
-> Gives a good overview of the structure/architecture of the system.
-> Avoids editing XML


… about the properties of the system

